#!/usr/bin/perl -w
use strict;
use Digest::MD5::File qw(file_md5_base64); 
use Time::HiRes qw (sleep);

my $mc_window_title="Minecraft 1.8.8";

# ----------------------------- main ----------------------------------
sub mouse_move
{
    my $to = $_[0];
    system(sprintf('xdotool search --name "%s" windowactivate --sync mousemove --window %%1 %s', $mc_window_title, $to));
}

sub mouse_click
{
    my $to = $_[0];
    system('xdotool click --delay 100 1');
}

sub mouse_click_second
{
    my $to = $_[0];
    system('xdotool click --delay 100 3');
}

sub mouse_click_shift
{
    my $to = $_[0];
    system('xdotool keydown shift sleep 0.2 click --delay 100 1 sleep 0.2 keyup shift sleep 0.2');
}

# -------------------- craft -----------------------------------------------

my $mc_invertory_start_position="550 535";
my $mc_invertory_cell_delta  = { 'x' => 73, 'y' => 73 };
my $mc_invertory_first_cell  = { 'x' => 550, 'y' => 535 };
my $mc_crafttable_first_cell  = { 'x' => 635, 'y' => 260 };
my $mc_crafttable_result_cell  = { 'x' => 1000, 'y' => 325 };

sub mc_invertory_cell
{
    my ($ix, $iy) = @_[0..1];
    return sprintf ("%d %d", 
	$mc_invertory_first_cell->{'x'}+$mc_invertory_cell_delta->{'x'}*$ix,
	$mc_invertory_first_cell->{'y'}+$mc_invertory_cell_delta->{'y'}*$iy);
}

sub mc_crafttable_cell
{
    my ($ix, $iy) = @_[0..1];
    return sprintf ("%d %d", 
	$mc_crafttable_first_cell->{'x'}+$mc_invertory_cell_delta->{'x'}*$ix,
	$mc_crafttable_first_cell->{'y'}+$mc_invertory_cell_delta->{'y'}*$iy);
}



sub test_invertory
{
    for my $ix (0..8)
    {
	for my $iy (0..3)
	{
	    print sprintf ("Invertory cell [%d, %d]\n", $ix, $iy);
	    mouse_move(mc_invertory_cell($ix, $iy));
	    sleep(0.3);
	}
    }
}

sub test_crafttable
{
    for my $ix (0..2)
    {
	for my $iy (0..2)
	{
	    print sprintf ("Crafttable cell [%d, %d]\n", $ix, $iy);
	    mouse_move(mc_crafttable_cell($ix, $iy));
	    sleep(0.3);
	}
    }
}

sub move_stack_i2ct
{
    my ($ix, $iy, $cx, $cy) = @_[0..3];
    mouse_move(mc_invertory_cell($ix, $iy));  mouse_click();
    mouse_move(mc_crafttable_cell($cx, $cy)); mouse_click();
}

sub move_stack_i2i
{
    my ($ix1, $iy1, $ix2, $iy2) = @_[0..3];
    mouse_move(mc_invertory_cell($ix1, $iy1)); mouse_click();
    mouse_move(mc_invertory_cell($ix2, $iy2)); mouse_click();
}

sub move_half_stack_i2ct
{
    my ($ix, $iy, $cx, $cy) = @_[0..3];
    mouse_move(mc_invertory_cell($ix, $iy));  mouse_click_second();
    mouse_move(mc_crafttable_cell($cx, $cy)); mouse_click();
}

sub move_stack_ctr2i
{
    mouse_move(sprintf('%d %d', $mc_crafttable_result_cell->{'x'}, $mc_crafttable_result_cell->{'y'}));  mouse_click_shift();
}

sub make_sea_light
{
    move_stack_i2ct(0, 0, 0, 0);
    move_stack_i2ct(1, 0, 2, 0);
    move_stack_i2ct(2, 0, 0, 2);
    move_stack_i2ct(3, 0, 2, 2);
    move_stack_i2ct(7, 1, 0, 1);
    move_stack_i2ct(8, 1, 1, 0);
    move_stack_i2ct(0, 2, 1, 1);
    move_stack_i2ct(1, 2, 1, 2);
    move_stack_i2ct(2, 2, 2, 1);
    move_stack_ctr2i();
    move_stack_i2ct(4, 0, 0, 0);
    move_stack_i2ct(5, 0, 2, 0);
    move_stack_i2ct(6, 0, 0, 2);
    move_stack_i2ct(7, 0, 2, 2);
    move_stack_i2ct(3, 2, 0, 1);
    move_stack_i2ct(4, 2, 1, 0);
    move_stack_i2ct(5, 2, 1, 1);
    move_stack_i2ct(6, 2, 1, 2);
    move_stack_i2ct(7, 2, 2, 1);
    move_stack_ctr2i();
    move_stack_i2ct(8, 0, 0, 0);
    move_stack_i2ct(0, 1, 2, 0);
    move_stack_i2ct(1, 1, 0, 2);
    move_stack_i2ct(2, 1, 2, 2);
    move_stack_i2ct(8, 2, 0, 1);
    move_stack_i2ct(0, 3, 1, 0);
    move_stack_i2ct(1, 3, 1, 1);
    move_stack_i2ct(2, 3, 1, 2);
    move_stack_i2ct(3, 3, 2, 1);
    move_stack_ctr2i();
    move_stack_i2ct(3, 1, 0, 0);
    move_stack_i2ct(4, 1, 2, 0);
    move_stack_i2ct(5, 1, 0, 2);
    move_stack_i2ct(6, 1, 2, 2);
    move_stack_i2ct(4, 3, 0, 1);
    move_stack_i2ct(5, 3, 1, 0);
    move_stack_i2ct(6, 3, 1, 1);
    move_stack_i2ct(7, 3, 1, 2);
    move_stack_i2ct(8, 3, 2, 1);
    move_stack_ctr2i();
}

sub make_cube
{
    for my $y (0..3)
    {
	move_stack_i2ct(0, $y, 0, 0);
	move_stack_i2ct(1, $y, 0, 1);
	move_stack_i2ct(2, $y, 0, 2);
	move_stack_i2ct(3, $y, 1, 0);
	move_stack_i2ct(4, $y, 1, 1);
	move_stack_i2ct(5, $y, 1, 2);
	move_stack_i2ct(6, $y, 2, 0);
	move_stack_i2ct(7, $y, 2, 1);
	move_stack_i2ct(8, $y, 2, 2);
	move_stack_ctr2i();
	print("Cube done\n");
    }
}

sub make_chest
{
    for my $ix (0..8)
    {
        move_stack_i2ct($ix, 3, 2, 2);
        move_stack_ctr2i();
    }
    print("Доски сделаны\n");
    for my $y (0..3)
    {
	move_stack_i2ct(0, $y, 0, 0);
	move_stack_i2ct(1, $y, 0, 1);
	move_stack_i2ct(2, $y, 0, 2);
	move_stack_i2ct(3, $y, 1, 0);
	move_stack_i2ct(4, $y, 1, 2);
	move_stack_i2ct(5, $y, 2, 0);
	move_stack_i2ct(6, $y, 2, 1);
	move_stack_i2ct(7, $y, 2, 2);
	move_stack_ctr2i();
	print("Стек сундуков готов\n");
    }
    move_half_stack_i2ct(8, 0, 0, 0);
    move_half_stack_i2ct(8, 1, 0, 1);
    move_half_stack_i2ct(8, 2, 0, 2);
    move_half_stack_i2ct(8, 3, 1, 0);
    move_stack_i2ct(8, 0, 1, 2);
    move_stack_i2ct(8, 1, 2, 0);
    move_stack_i2ct(8, 2, 2, 1);
    move_stack_i2ct(8, 3, 2, 2);
    move_stack_ctr2i();
    print("Полстека сундуков готовы\n");
}

sub make_centered_cube
{
    for my $y (0..3)
    {
	move_stack_i2ct(0, $y, 0, 0);
	move_stack_i2ct(1, $y, 0, 1);
	move_stack_i2ct(2, $y, 0, 2);
	move_stack_i2ct(3, $y, 1, 0);
	move_stack_i2ct(8, $y, 1, 1);
	move_stack_i2ct(4, $y, 1, 2);
	move_stack_i2ct(5, $y, 2, 0);
	move_stack_i2ct(6, $y, 2, 1);
	move_stack_i2ct(7, $y, 2, 2);
	move_stack_ctr2i();
	print("Enchanced cube done\n");
    }
}

sub make_paper
{
    for my $y (0..3)
    {
	for my $dx (0, 3, 6)
	{
	    move_stack_i2ct(0+$dx, $y, 0, 1);
	    move_stack_i2ct(1+$dx, $y, 1, 1);
	    move_stack_i2ct(2+$dx, $y, 2, 1);
	    move_stack_ctr2i();
	}
    }
}

sub make_mini_cube
{
    for my $y (0..3)
    {
	for my $dx (0, 4)
	{
	    move_stack_i2ct(0+$dx, $y, 0, 0);
	    move_stack_i2ct(1+$dx, $y, 0, 1);
	    move_stack_i2ct(2+$dx, $y, 1, 0);
	    move_stack_i2ct(3+$dx, $y, 1, 1);
	    move_stack_ctr2i();
	}
    }
    move_stack_i2ct(8, 0, 0, 0);
    move_stack_i2ct(8, 1, 0, 1);
    move_stack_i2ct(8, 2, 1, 0);
    move_stack_i2ct(8, 3, 1, 1);
    move_stack_ctr2i();
    print("Mini cubes done\n");
}

sub make_jack_lanterns
{
    #0 - пусто
    #1 - тыквы(8)
    #2 - тыквы(8)
    #3 - 4 палки 4 угля

    for my $dx (0..3)
    {
	move_stack_i2ct(0+$dx, 3, 0, 1);
	move_stack_i2ct(4+$dx, 3, 0, 0);
	move_stack_ctr2i();
    }
    move_stack_i2i(8, 0, 0, 0);
    move_stack_i2i(8, 1, 1, 0);
    move_stack_i2i(8, 2, 2, 0);
    move_stack_i2i(8, 3, 3, 0);
    for my $x (0..7)
    {
	move_stack_i2ct($x, 2, 0, 0);
	move_stack_i2ct($x, 3, 0, 1);
	move_stack_ctr2i();
	move_stack_i2ct($x, 1, 0, 0);
	move_stack_i2ct($x, 0, 0, 1);
	move_stack_ctr2i();
    }
}


# ------------------- trade ------------------------------------------------------------
my $trader_invertory_cell = { 0 => {'x' => 660, 'y' => 400}, 1 => {'x' => 760, 'y' => 400} };
my $trader_result_cell    = {'x' => 1000, 'y' => 400};
my $trader_next_page    = {'x' => 1100, 'y' => 300};
my $trader_prev_page    = {'x' => 570, 'y' => 300};
my $trader_drop    = {'x' => 300, 'y' => 900};

sub put_to_ti
{
    my $ti = $_[0];
    mouse_move(sprintf("%d %d", $trader_invertory_cell->{$ti}{'x'}, $trader_invertory_cell->{$ti}{'y'})); mouse_click();
}

sub move_stack_ti2i
{
    my ($ix, $iy, $ti) = @_[0..2];
    put_to_ti($ti);
    mouse_move(mc_invertory_cell($ix, $iy));  mouse_click();
}

sub move_stack_i2ti
{
    my ($ix, $iy, $ti) = @_[0..2];
    mouse_move(mc_invertory_cell($ix, $iy));  mouse_click();
    put_to_ti($ti);
}

sub move_stack_trr2i
{
    mouse_move(sprintf("%d %d", $trader_result_cell->{'x'}, $trader_result_cell->{'y'}));  mouse_click_shift();
}

sub drop_items_in_hand
{
    mouse_move(sprintf("%d %d", $trader_drop->{'x'}, $trader_drop->{'y'}));  mouse_click();
}

sub buy_items
{
    my $page = $_[0];
    switch_to_trader_page($page);
    move_stack_i2ti(0, 0, 0);
    do
    {
        mouse_move(sprintf("%d %d", $trader_result_cell->{'x'}, $trader_result_cell->{'y'}));
        mouse_click();
        drop_items_in_hand();
    }
    while(check_trader_avialable() && !check_trader_result_empty());
    move_stack_ti2i(0, 0, 0);
}

sub trade_stack
{
    my ($ix, $iy, $ti) = @_[0..2];
    move_stack_i2ti($ix, $iy, $ti);
    move_stack_trr2i();
    while(!check_trader_result_empty() && check_trader_avialable())
    {
        put_to_ti($ti);
        move_stack_trr2i();
    }
}

sub switch_to_trader_page
{
    switch_to_first_page();
    my $page = $_[0];
    mouse_move(sprintf("%d %d", $trader_next_page->{'x'}, $trader_next_page->{'y'})); 
    for(my $i = 1; $i < $page; $i++)
    {
	mouse_click();
    }
}

sub switch_to_first_page
{
    mouse_move(sprintf("%d %d", $trader_prev_page->{'x'}, $trader_prev_page->{'y'})); 
    for(my $i = 1; $i < 15; $i++)
    {
	mouse_click();
	sleep(0.1);
    }
}

sub trade_wait
{
    my @pages_to_check = @_;
    print("Отдыхаем, пока раб апгредится...\n");
    system('xdotool key e sleep 3 click --delay 100 3 sleep 2');
    if(scalar(@pages_to_check) > 0)
    {
	my $flag = 0;
	print("Проверяем, проапгредился ли раб...\n");
	for my $page (@pages_to_check)
	{
	    switch_to_first_page();
	    $flag += check_trader_avialable_on_page($page) ? 1 : 0;
	}
	if($flag < scalar(@pages_to_check))
	{
	    print("Раб устал, уходим...\n");
	    exit(0);
	}
    }
    return 1;
}

sub trade_all
{
    my ($xpos, $ypos, $page) = @_[0..2];
    print("Торгуем...\n");
    switch_to_trader_page($page);
    if(!check_trader_avialable())
    {
	return { 'x' => $xpos, 'y' => $ypos, 'done' => 0 };
    }
    for (my $y=$ypos; $y<=3; $y++) # 3
    {
	for (my $x=$xpos; $x<=8; $x++)
	{
	    trade_stack($x, $y, 0);
	    if(!check_trader_avialable())
	    {
		if(!check_trader_result_empty())
		{
		    put_to_ti(0);
		}
		move_stack_ti2i($x, $y, 0);
		return { 'x' => $x, 'y' => $y, 'done' => 1 };
	    }
	    if($xpos > 0) { $xpos = 0; } 
	}
	if($ypos > 0) { $ypos = 0; } 
    }
    return { 'done' => -1 };
}

sub trade_invertory_row
{
    my ($x, $y, $page) = @_[0..2];
    if($page>1) { switch_to_trader_page($page); }
    for (; $x<=8; $x++)
    {
        trade_stack($x, $y, 0);
        if(!check_trader_avialable())
        {
	    if(!check_trader_result_empty())
	    {
	        put_to_ti(0);
	    }
	    move_stack_ti2i($x, $y, 0);
	    return $x;
	}
    }
    return -1;
}

sub trade_farmer
{
    my ($xpos_0, $xpos_1, $xpos_2, $xpos_3) = @_[0..3];
    # снизу-вверх ряды арбуз(7), тыква(5), картошка (2), морковка (3)
    if($xpos_0 >= 0) { print("Торгуем картошку\n"); $xpos_0 = trade_invertory_row($xpos_0, 1, 2); } # Торгуем картошку
    if($xpos_1 >= 0) { print("Торгуем моркву\n");   $xpos_1 = trade_invertory_row($xpos_1, 0, 3); } # Торгуем моркву
    if($xpos_2 >= 0) { print("Торгуем тыкву\n");    $xpos_2 = trade_invertory_row($xpos_2, 2, 5); } # Торгуем тыкву
    if($xpos_3 >= 0) { print("Торгуем арбуз\n");    $xpos_3 = trade_invertory_row($xpos_3, 3, 7); } # Торгуем арбуз
    if($xpos_0 < 0 && $xpos_1 < 0 && $xpos_2 < 0 && $xpos_3 < 0) 
    {
	print("Торговать больше нечем, уходим...\n");
	exit (0); 
    }
    if(trade_wait(2,3,5,7))
    {
	trade_farmer($xpos_0, $xpos_1, $xpos_2, $xpos_3);
    }
}

sub trade_simple
{
    my ($xpos, $ypos, $item_page, $buy_pages) = @_[0..3];
    my $trade_stat = trade_all($xpos, $ypos, $item_page);
    if($trade_stat->{'done'} < 0)
    {
	print("Торговать больше нечем, уходим...\n");
	exit (0); 
    }
    trade_wait();
    if(check_trader_avialable_on_page($item_page))
    {
	trade_simple($trade_stat->{'x'}, $trade_stat->{'y'}, $item_page, $buy_pages);
    }
    for my $bpage (@{$buy_pages})
    {
	if(check_trader_avialable_on_page($bpage))
	{
	    print("Покупаем шмот...\n");
	    buy_items($bpage);
	    trade_wait();
	    if(check_trader_avialable_on_page($item_page))
	    {
		trade_simple($trade_stat->{'x'}, $trade_stat->{'y'}, $item_page, $buy_pages);
	    }
	}
    }
}

sub trade_libraryan
{
    trade_simple(0, 0, 1, [5, 7, 8]);
}

sub trade_priest
{
    trade_simple(0, 0, 1, [3, 4, 5, 6]);
}

sub trade_meater
{
    trade_simple(0, 0, 2, [4, 5]);
}

# -------------------  traceback ----------------------------
sub get_screenshot
{
    my ($location, $file, $clean) = @_[0..2];
    if($clean)
    {
	#print "Clean \n";
	mouse_move("10 10");
	#sleep(1);
    }
    #print sprintf("Taking screenshot at %s to %s\n", $location, $file);
    system(sprintf('import -silent -window "%s" -crop %s %s', $mc_window_title, $location, $file));
    return $file;
}

sub compare_screenshots
{
    my ($f0, $f1) = @_[0..1];
    #print sprintf("%s == %s : %s\n",file_md5_base64($f0), file_md5_base64($f1) ,file_md5_base64($f0) eq file_md5_base64($f1));
    return file_md5_base64($f0) eq file_md5_base64($f1);
}

sub check_trader_avialable
{
    return compare_screenshots('sreenshot-etalon-trader-no-avialable.bmp', get_screenshot("100x100+830+230", '/tmp/trader-na.bmp', 0));
}

sub check_trader_avialable_on_page
{
    my $page = $_[0];
    switch_to_trader_page($page);
    return check_trader_avialable();
}

sub check_trader_result_empty
{
    return compare_screenshots('screenshot-etalon-trader-result-empty.bmp', get_screenshot("100x100+950+360", '/tmp/trader-remp.bmp', 0));
}

#test_invertory();
#test_crafttable();
#make_sea_light();
#make_cube();
#make_centered_cube();
#make_mini_cube();
#make_paper();
#make_chest();
#make_jack_lanterns();


#trade_all();
#trade_farmer(0,0,0,0);
#trade_libraryan();
#trade_priest();
trade_meater();

