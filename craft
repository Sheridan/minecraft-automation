#!/usr/bin/perl -w

use strict;
use JSON;
use Time::HiRes qw (sleep);
use Data::Dumper;
use Getopt::Long;
use lib './lib';
use Minecraft::Automation;
use Minecraft::FileIO;
use Minecraft::UserInteraction;
use Minecraft::Screenshoter;
use Minecraft::ItemsReader;
$main::config = Minecraft::FileIO::read_config();
my $total_crafted = 0;
my $target_item = '';
my $reciepts = {};
my $self_invertory = Minecraft::ItemsReader->new('crafttable', 'self-invertory');
my $crafttable = Minecraft::ItemsReader->new('crafttable', 'cells');
GetOptions(
    "craft=s" => \$target_item,
    "help"    => \&help
    ) or die("Что то не так с опциями командной строки\n");

sub help
{
  print <<_HELP_;
Использование: craft <options>
Подразумевается, что мы работаем с полными стэками, если шмот стэкуется.
Опции:
  --craft=строка  Что надо скрафтить.
    Можно выбрать одно из:
_HELP_
  for my $reciept_file (Minecraft::FileIO::get_items())
  {
    my $reciept = Minecraft::FileIO::read_item_file($reciept_file);
    printf("\t\t%s, рецептов: %d\n", $reciept->{'name'}, $reciept->{'craft-reciepts'});
    for my $reciept_number (keys(%{$reciept->{'reciepts'}}))
    {
      printf("\t\t\tРецепт %d: ", $reciept_number+1);
      my @data = ();
      for my $reciept_item (keys(%{$reciept->{'reciepts'}{$reciept_number}{'used-items'}}))
      {
        push(@data, sprintf("%s:%d", $reciept_item, $reciept->{'reciepts'}{$reciept_number}{'used-items'}{$reciept_item}));
      }
      printf("%s\n", join(',', @data));
    }
    # print Dumper ($reciept);
  }
  exit(0);
}

# sub move_stack_from_craft_result
# {
#   Minecraft::Automation::take_stack_to_invertory($main::config->{'system'}{'crafttable'}{'result'});
#   $total_crafted++;
#   Minecraft::UserInteraction::say("%d шт. готово.", $total_crafted);
# }
#
# for my $reciept_file (Minecraft::FileIO::get_items())
# {
#   print Dumper (Minecraft::FileIO::read_item_file($reciept_file))
# }
sub load_reciept
{
  my $item = $_[0];
  if(Minecraft::FileIO::item_description_exists($item) && !exists($reciepts->{$item}))
  {
    $reciepts->{$item} = Minecraft::FileIO::read_item($item);
    for my $reciept_number (keys(%{$reciepts->{$item}{'reciepts'}}))
    {
      for my $reciept_item (keys(%{$reciepts->{$item}{'reciepts'}{$reciept_number}{'used-items'}}))
      {
        load_reciept($reciept_item);
        $self_invertory->add_item_to_items_to_find($reciept_item);
        $crafttable->add_item_to_items_to_find($reciept_item);
      }
    }
    return 1;
  }
  return 0;
}

if(load_reciept($target_item))
{
  Minecraft::Automation::restore_window();
  print Dumper($reciepts);
  $self_invertory->map_cells();
  print Dumper($self_invertory);
}

# Minecraft::Automation::restore_window();
# my $self_invertory = Minecraft::ItemsReader->new('crafttable', 'self-invertory');
# $self_invertory->map_cells();
# my $crafttable = Minecraft::ItemsReader->new('crafttable', 'cells');
# $crafttable->map_cells();
