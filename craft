#!/usr/bin/perl -w

use strict;
use JSON;
use Time::HiRes qw (sleep);
use Data::Dumper;
use Getopt::Long;
use lib './lib';
use Minecraft::Player;
use Minecraft::Window;
use Minecraft::FileIO;
use Minecraft::UserInteraction;
use Minecraft::Interfaces::Crafttable;
$main::config = Minecraft::FileIO::read_config();
$main::player = Minecraft::Player->new();
my $target_item = '';
my $reciepts = {};
my $crafttable = Minecraft::Interfaces::Crafttable->new();
GetOptions(
    "craft=s" => \$target_item,
    "help"    => \&help
    ) or die("Что то не так с опциями командной строки\n");

sub help
{
  print <<_HELP_;
Использование:
  craft --craft=item для крафта
  craft --craft=item --help для помощи по крафту (поддерживаются неполные имена)
  craft --help - полный список шмота, который можно скрафтить
Подразумевается, что мы работаем с полными стэками, если шмот стэкуется.
Опции:
  --craft=строка  Что надо скрафтить.
    Можно выбрать одно из:
_HELP_
  if(!$target_item)
  {
    $target_item = '.*';
  }
  for my $item (sort(Minecraft::FileIO::get_items()))
  {
    if($item =~ /$target_item/)
    {
      reciept_help($item);
    }
  }
  exit(0);
}

sub reciept_help
{
  my $item = $_[0];
  # if(!Minecraft::FileIO::item_description_exists($item))
  # {
  #   Minecraft::UserInteraction::say("Рецепта для %s нет", $item);
  #   exit(0);
  # }
  my $reciept = Minecraft::FileIO::read_item_file($item);
  if($reciept->{'craftable'} eq 'no') {return;}
  printf("\t\t%s, рецептов: %d\n", $reciept->{'name'}, $reciept->{'craft-reciepts'});
  for my $reciept_number (sort keys(%{$reciept->{'reciepts'}}))
  {
    printf("\t\t\tРецепт %d: ", $reciept_number+1);
    my @data = ();
    for my $reciept_item (keys(%{$reciept->{'reciepts'}{$reciept_number}{'ingridients'}}))
    {
      push(@data, sprintf("%s:%d", $reciept_item, $reciept->{'reciepts'}{$reciept_number}{'ingridients'}{$reciept_item}));
    }
    printf("%s\n", join(',', @data));
  }
  # print Dumper ($reciept);
}


# for my $reciept_file (Minecraft::FileIO::get_items())
# {
#   print Dumper (Minecraft::FileIO::read_item_file($reciept_file))
# }
sub load_reciept
{
  my $item = $_[0];
  if(Minecraft::FileIO::item_description_exists($item) && !exists($reciepts->{$item}))
  {
    $reciepts->{$item} = Minecraft::FileIO::read_item($item);
    for my $reciept_number (keys(%{$reciepts->{$item}{'reciepts'}}))
    {
      for my $ingridient (keys(%{$reciepts->{$item}{'reciepts'}{$reciept_number}{'ingridients'}}))
      {
        load_reciept($ingridient);
        $crafttable->add_item_to_items_to_find($ingridient);
      }
    }
    return 1;
  }
  return 0;
}

sub self_invertory_has_ingridients
{
  my ($item_to_craft, $reciept_number) = @_[0..1];
  if(what_ingridient_i_must_craft($item_to_craft, $reciept_number))
  {
    Minecraft::UserInteraction::say("Материалов для %s нет", $item_to_craft);
    return 0;
  }
  return 1;
}

sub what_ingridient_i_must_craft
{
  my ($item_to_craft, $reciept_number) = @_[0..1];
  for my $ingridient (keys(%{$reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'ingridients'}}))
  {
    if(
        (
          (
            $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'result'}{'units'} eq 'stack' &&
            $reciepts->{$item_to_craft}{'stackable'} eq 'yes'
          ) &&
          $crafttable->self_invertory()->items_count($ingridient) < $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'ingridients'}{$ingridient}
        ) ||
        (
          $crafttable->self_invertory()->items_count($ingridient) == 0
        )
      )
    {
      return $ingridient;
    }
  }
  return 0;
}

sub self_invertory_has_cells_for_result
{
  my ($item_to_craft, $reciept_number) = @_[0..1];
  my $total_ingridients_count = 0;
  for my $ingridient (keys(%{$reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'ingridients'}}))
  {
    $total_ingridients_count += $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'ingridients'}{$ingridient};
  }
  if(
      (
        $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'result'}{'units'} eq 'stack' &&
        $crafttable->self_invertory()->empty_count() < $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'result'}{'quantity'}-$total_ingridients_count
      ) ||
      (
        $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'result'}{'units'} eq 'one' &&
        $crafttable->self_invertory()->empty_count() == 0
      )
    )
  {
    Minecraft::UserInteraction::say("Место в инвентаре при крафте %s закончилось. Не хватило %d ячеек.",
                      $item_to_craft,
                      $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'result'}{'quantity'}-$total_ingridients_count-$crafttable->self_invertory()->empty_count());
    return 0;
  }
  return 1;
}

sub craft
{
  my ($item_to_craft) = $_[0];
  for my $reciept_number (keys(%{$reciepts->{$item_to_craft}{'reciepts'}}))
  {
    if(self_invertory_has_ingridients($item_to_craft, $reciept_number) && self_invertory_has_cells_for_result($item_to_craft, $reciept_number))
    {
      Minecraft::UserInteraction::say("Крафт %s", $item_to_craft);
      for my $crafttable_y (0..2)
      {
        for my $crafttable_x (0..2)
        {
          my $current_ingridient = $reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'crafttable'}{$crafttable_x}{$crafttable_y};
          if($current_ingridient ne 'empty')
          {
            my $coordinates_from = $crafttable->self_invertory()->take_stack_of_items($current_ingridient);
            if($reciepts->{$item_to_craft}{'reciepts'}{$reciept_number}{'result'}{'units'} eq 'stack')
            {
              $crafttable->crafttable()->put_stack_of_items($current_ingridient, $crafttable_x, $crafttable_y);
            }
            else
            {
                $crafttable->crafttable()->put_one_item($current_ingridient, $crafttable_x, $crafttable_y);
                if($reciepts->{$current_ingridient}{'stackable'} eq 'yes')
                {
                  if(!$crafttable->hand_is_empty())
                  {
                    $crafttable->self_invertory()->put_stack_of_items($current_ingridient, $coordinates_from->{'x'}, $coordinates_from->{'y'});
                  }
                }
            }
          }
        }
      }
      $crafttable->take_all_craft_result();
      craft($target_item);
    }
    else
    {
      craft(what_ingridient_i_must_craft($item_to_craft, $reciept_number));
    }
  }
}

if(load_reciept($target_item))
{
  Minecraft::Window::restore_size_and_position();
  $crafttable->self_invertory()->map_cells();
  # $crafttable->dump();
  craft($target_item);
  # Minecraft::UserInteraction::say("Материалы закончились, готово.");
  # print Dumper($reciepts);
  # print Dumper($self_invertory);
  # print Dumper($crafttable);
}
else
{
  help();
}
