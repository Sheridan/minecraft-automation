#!/usr/bin/perl -w

use strict;
use JSON;
use Time::HiRes qw (sleep);
use File::Path qw(make_path);
use Data::Dumper;
use lib './lib';
use Minecraft::Automation;
use Minecraft::Screenshoter;
use Minecraft::UserInteraction;
use Minecraft::Settings;

$main::config = Minecraft::Settings::read_config();

# --------------------------------------- служебное -----------------------------------

sub get_cursor_position
{
    my $text = $_[0];
    Minecraft::UserInteraction::say($text);
    my @tmp = split(/ /, `./get-mouse-position`);
    #print Dumper(@tmp);
    return {
                'x' => ($tmp[0]+0) > $main::config->{'system'}{'window'}{'geometry'}{'x'} ? ($tmp[0]+0) - $main::config->{'system'}{'window'}{'geometry'}{'x'} : $main::config->{'system'}{'window'}{'geometry'}{'x'} - ($tmp[0]+0),
                'y' => ($tmp[1]+0) > $main::config->{'system'}{'window'}{'geometry'}{'y'} ? ($tmp[1]+0) - $main::config->{'system'}{'window'}{'geometry'}{'y'} : $main::config->{'system'}{'window'}{'geometry'}{'y'} - ($tmp[1]+0)
            };
}

sub get_cell_coordinates
{
    my $text = $_[0];
    my $tmp = {};
    $tmp->{'tl'} = get_cursor_position("$text. Кликните в левом верхнем углу ячейки");
    $tmp->{'br'} = get_cursor_position("$text. Кликните в правом нижнем углу ячейки");
    $tmp->{'c'} = 
            {
                'x' => int($tmp->{'tl'}{'x'} + ($tmp->{'br'}{'x'} - $tmp->{'tl'}{'x'})/2),
                'y' => int($tmp->{'tl'}{'y'} + ($tmp->{'br'}{'y'} - $tmp->{'tl'}{'y'})/2)
            };
    #print Dumper($tmp);
    return $tmp;
}

sub get_button_coordinates
{
    my $text = $_[0];
    my $tmp = {};
    $tmp->{'c'} = get_cursor_position("$text. Нажмите эту кнопку, старайтесь жать посередине кнопки");
    return $tmp;
}
# --------------------------------------- вопросы -----------------------------------
sub ask_happened
{
	if(!Minecraft::UserInteraction::prompt_yn("Всё прошло успешно?"))
	{
		Minecraft::UserInteraction::say("Нет? Тогда надо повторить...");
		return 0;
	}
	$main::config = Minecraft::Settings::save_system_config($main::config);   
	return 1;
}

sub prompt_ask
{
	my ($text, $default) = @_[0..1];
	my $answer = Minecraft::UserInteraction::prompt(sprintf("%s\nОставить как есть ('%s') - просто энтер.\n", $text, $default));
	if($answer eq '')
	{
		$answer = $default;
	}
	if(!Minecraft::UserInteraction::prompt_yn(sprintf("Вы ввели '%s'. Верно?", $answer)))
	{
		return prompt_ask($text, $default); 
	}
	return $answer;
}

sub ask_texture_pack
{
	my $text = <<TTT;
Введите латиницей имя ресурспака. Необязательно именно так он должен называться. Главное что бы вы потом поняли, что это он.
Для этой софтины необходимо, что бы не было анимированных вещей. Ну как минимум не более чем в стандартном ресурспаке.
Или просто работайте с софтиной, переключаясь в стандартный ресурспак
При смене ресурспака необходимо будет заново обучить софтину опознавать шмот
Если меняете ресурспак обратно - достаточно руками изменить его имя в user-config.json
TTT
	$main::config->{'user'}{'minecraft'}{'texture_pack'} = prompt_ask($text, $main::config->{'user'}{'minecraft'}{'texture_pack'});
	$main::config = Minecraft::Settings::save_user_config($main::config);
	make_path(sprintf("%s/%s/items", $main::config->{'user'}{'paths'}{'screenshosts'}, $main::config->{'user'}{'minecraft'}{'texture_pack'}));
}

sub ask_screenshot_path
{
	my $text = <<TTT;
Где можно будет сохранять изображения, необходимые для обратной связи с майном?
Введите путь.
TTT
	$main::config->{'user'}{'paths'}{'screenshosts'} = prompt_ask($text, $main::config->{'user'}{'paths'}{'screenshosts'});
	$main::config = Minecraft::Settings::save_user_config($main::config);
	make_path($main::config->{'user'}{'paths'}{'screenshosts'});
}

sub ask_mc_title
{
	my $text = <<TTT;
Введите полностью заголовок окна майна. Не лаунчера!
TTT
	$main::config->{'user'}{'minecraft'}{'title'} = prompt_ask($text, $main::config->{'user'}{'minecraft'}{'title'});
	$main::config = Minecraft::Settings::save_user_config($main::config);
}

sub prompt_change_existent
{
	my $exists = $_[0];
	return $exists ? Minecraft::UserInteraction::prompt_yn("Это уже было настроено раньше. Желаете перенастроить?") : 0;
}

# ------------------------------------- окна, ячейки.... ----------------------------

sub get_windowsizeposition
{
    Minecraft::UserInteraction::wait_press_enter("Расположите окно майнкрафта так, как вам привычно и удобно");
    if(!prompt_change_existent(exists($main::config->{'system'}{'window'}{'geometry'}))) { return; }
    Minecraft::Screenshoter::get_window_size_position();
    if(!ask_happened()) { get_windowsizeposition(); }
}


sub get_crafttable_cells
{
    Minecraft::UserInteraction::wait_press_enter("Откройте интерфейс стола крафтинга");
    Minecraft::UserInteraction::say("Нумерация ячеек следующая:\n0:0 1:0 2:0\n0:1 1:1 2:1\n0:2 1:2 2:2");
    if(prompt_change_existent(exists($main::config->{'system'}{'crafttable'})))
    {
		$main::config->{'system'}{'no-interface'} = get_button_coordinates("Кликните вне интерфейса, но в окне майна. Желательно посередине окна, как можно ниже. Эта точка будет использоваться для скрытия мыша и для дропа");
		for my $y (0..2)
		{
			for my $x (0..2)
			{
				$main::config->{'system'}{'crafttable'}{$x}{$y} = get_cell_coordinates("Ячейка $x:$y стола крафта");
			}
		}
		$main::config->{'system'}{'crafttable'}{'result'} = get_cell_coordinates("Ячейка результата стола крафта");
		$main::config->{'system'}{'crafttable'}{'clean'} = get_cell_coordinates("Пустое место в интерфейсе размером с ячейку, советую где нибудь под стрелкой, указывающей на результат");
	}
	else
	{
		Minecraft::UserInteraction::wait_press_enter("Всё равно откройте интерфейс стода крафта. Сделаем скриншоты для обратной связи");
	}
    Minecraft::Screenshoter::take_screenshot("dont-delete-crafttable-clean", $main::config->{'system'}{'crafttable'}{'clean'});
    if(!ask_happened() || !test_crafttable()) { get_crafttable_cells(); }
    
}

sub get_invertory_cells
{
    Minecraft::UserInteraction::wait_press_enter("Опять откройте интерфейс стола крафтинга, теперь будем выяснять где у нас инвертарь");
    Minecraft::UserInteraction::say("Нумерация ячеек следующая:\n0:0 1:0 2:0 3:0 4:0 5:0 6:0 7:0 8:0\n0:1 1:1 2:0 3:1 4:0 5:1 6:1 7:1 8:1\n0:2 1:2 2:0 3:2 4:0 5:2 6:2 7:2 8:2\n0:3 1:3 2:0 3:3 4:0 5:3 6:3 7:3 8:3");
    if(!prompt_change_existent(exists($main::config->{'system'}{'invertory'}))) { return; }
    for my $y (0..3)
    {
        for my $x (0..8)
        {
            $main::config->{'system'}{'invertory'}{$x}{$y} = get_cell_coordinates("Ячейка $x:$y инвертаря");
        }
    }
    if(!ask_happened() || !test_invertory()) { get_invertory_cells(); }
}

sub get_villager_interface
{
    Minecraft::UserInteraction::wait_press_enter("Откройте интерфейс торговли");
    if(prompt_change_existent(exists($main::config->{'system'}{'villager'})))
    {
		$main::config->{'system'}{'villager'}{'invertory'}{0} = get_cell_coordinates("Левая ячейка инвертаря крестьянина");
		$main::config->{'system'}{'villager'}{'invertory'}{1} = get_cell_coordinates("Правая ячейка инвертаря крестьянина");
		$main::config->{'system'}{'villager'}{'result'} = get_cell_coordinates("Ячейка результата торговли крестьянина (справа которая)");
		$main::config->{'system'}{'villager'}{'clean'} = get_cell_coordinates("Пустое место в интерфейсе размером с ячейку, советую справа, под кнопкой перелистывания страницы вперед");
		Minecraft::UserInteraction::wait_press_enter("Теперь переключитесь на страницу торговли, где крестьянин еще может торговать (стрелки не перечеркнуты)");
		$main::config->{'system'}{'villager'}{'trade-avialable'} = get_cell_coordinates("Верхняя стрелка");
		Minecraft::UserInteraction::wait_press_enter("Теперь надо найти крестьянина минимум с тремя доступными страницами торговли (потребуется дважды жать на кнопки)");
		$main::config->{'system'}{'villager'}{'next_page'} = get_cell_coordinates("Кнопка переключения на следующую страницу торговли");
		$main::config->{'system'}{'villager'}{'prev_page'} = get_cell_coordinates("Кнопка переключения на предыдущую страницу торговли");
	}
	else
	{
		Minecraft::UserInteraction::wait_press_enter("Всё равно подойдите к торговцу, который еще может торговать и у него доступно более 2х товаров, откройте интерфейс торговли. Сделаем скриншоты для обратной связи");
	}
	for my $button_name ('next_page', 'prev_page')
	{
		Minecraft::Automation::mouse_move_to_button($main::config->{'system'}{'villager'}{$button_name});
		for (0..15)
		{
			Minecraft::Automation::mouse_left_click();
		}
		Minecraft::Automation::mouse_move_to_cell({ 'c' => {'x' => 10, 'y' => 10 } });
		sleep(0.5);
		Minecraft::Screenshoter::take_screenshot(sprintf("dont-delete-villager-%s-not-avialable", $button_name), $main::config->{'system'}{'villager'}{$button_name});
	}

    Minecraft::Screenshoter::take_screenshot("dont-delete-villager-trade-avialable", $main::config->{'system'}{'villager'}{'trade-avialable'});
    Minecraft::Screenshoter::take_screenshot("dont-delete-villager-invertory-0", $main::config->{'system'}{'villager'}{'invertory'}{0});
    Minecraft::Screenshoter::take_screenshot("dont-delete-villager-invertory-1", $main::config->{'system'}{'villager'}{'invertory'}{1});
    Minecraft::Screenshoter::take_screenshot("dont-delete-villager-result-empty", $main::config->{'system'}{'villager'}{'result'});
    Minecraft::Screenshoter::take_screenshot("dont-delete-villager-clean", $main::config->{'system'}{'villager'}{'clean'});
    if(!ask_happened() || !test_villager_interface()) { get_villager_interface(); }  
}

sub train_view_item_invertory_and_crafttable
{
    my ($item, $text) = @_[0..1];
    Minecraft::UserInteraction::wait_press_enter("Поместите $text ($item) в ячейку 8:3 инвертаря (нижний правый угол), откройте интерфейс крафта");
    train_view_item_xy($item, 'invertory', 8, 3);
    Minecraft::Automation::put_stack_to_cell($main::config->{'system'}{'crafttable'}{2}{2});
    train_view_item_xy($item, 'crafttable', 2, 2);
    if(!ask_happened()) { train_view_item_invertory_and_crafttable($item, $text); }  
}

sub train_view_empty_invertory_and_crafttable
{
    Minecraft::UserInteraction::wait_press_enter("Очистите инвертарь, откройте интерфейс крафта");
    train_view_item_xy('empty', 'invertory', 8, 3);
    train_view_item_xy('empty', 'crafttable', 2, 2);
    if(!ask_happened()) { train_view_empty_invertory_and_crafttable(); }  
}

sub train_view_item_xy
{
    my ($item, $where, $max_x, $max_y) = @_[0..3];
    make_path(sprintf("%s/%s/items/%s/", $main::config->{'user'}{'paths'}{'screenshosts'}, $main::config->{'user'}{'minecraft'}{'texture_pack'}, $item));
    for my $y (reverse 0..$max_y)
    {
        for my $x (reverse 0..$max_x)
        {
            if($x<$max_x || $y<$max_y)
            {
                Minecraft::Automation::put_stack_to_cell($main::config->{'system'}{$where}{$x}{$y});
            }
            Minecraft::Screenshoter::take_item_screenshot($item, $where, $x, $y, $main::config->{'system'}{$where}{$x}{$y});
            Minecraft::Automation::take_stack_from_cell($main::config->{'system'}{$where}{$x}{$y});
        }
    }
}

sub train_view_items
{
	train_view_item_invertory_and_crafttable('pumpkin', 'тыкву');
	train_view_item_invertory_and_crafttable('carrot', 'морковь');
	train_view_item_invertory_and_crafttable('potato', 'картофель');
	train_view_item_invertory_and_crafttable('wheat', 'пшеницу');
	train_view_item_invertory_and_crafttable('block-melon', 'блок арбуза');
	train_view_item_invertory_and_crafttable('raw-chicken', 'сырую курятину');
	train_view_item_invertory_and_crafttable('raw-porkchop', 'сырую свинину');
	train_view_item_invertory_and_crafttable('rotten-flesh', 'гнилую плоть');
	train_view_item_invertory_and_crafttable('coal', 'уголь');
	train_view_item_invertory_and_crafttable('paper', 'бумагу');
	train_view_item_invertory_and_crafttable('string', 'нить');
	train_view_item_invertory_and_crafttable('emerald', 'изумруд');
	train_view_empty_invertory_and_crafttable();
	$main::config = Minecraft::Settings::save_system_config($main::config);
}

# -------------------------------------------------- тесты --------------------------------------------
sub test_crafttable
{
    Minecraft::UserInteraction::wait_press_enter("Показываю ячейки стола крафта. Если вы правильно их отмечали, курсор будет приблизительно посередине каждой ячейки");
    for my $y (0..2)
    {
        for my $x (0..2)
        {
            Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'crafttable'}{$x}{$y});
            sleep(0.5);
        }
    }
    Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'crafttable'}{'result'});
    sleep(0.5);
    return ask_happened();
}

sub test_invertory
{
    Minecraft::UserInteraction::wait_press_enter("Показываю ячейки инвертаря. Если вы правильно их отмечали, курсор будет приблизительно посередине каждой ячейки");
    for my $y (0..3)
    {
        for my $x (0..8)
        {
            Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'invertory'}{$x}{$y});
            sleep(0.5);
        }
    }
    return ask_happened();
}

sub test_villager_interface
{
    Minecraft::UserInteraction::wait_press_enter("Показываю интерфейс торговли. Если вы правильно их отмечали, курсор будет приблизительно посередине каждой ячейки и верхней стрелки");
    Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'villager'}{'next_page'}); sleep(0.5);
    Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'villager'}{'prev_page'}); sleep(0.5);
    Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'villager'}{'invertory'}{0}); sleep(0.5);
    Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'villager'}{'invertory'}{1}); sleep(0.5);
    Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'villager'}{'result'}); sleep(0.5);
    Minecraft::Automation::mouse_move_to_cell($main::config->{'system'}{'villager'}{'trade-avialable'}); sleep(0.5);
    return ask_happened();
}

# ------------------------------------------------------------ main -----------------------------------------------------


#Minecraft::UserInteraction::say("Начинаем настройку. Следуйте рекомендациям тут.");
#ask_screenshot_path();
#ask_texture_pack();
#ask_mc_title();
#Minecraft::UserInteraction::say("В user-config.json есть еще настройки таймаутов. При низких лагах можно их подкрутить в лучшую сторону.");
#get_windowsizeposition();
#Minecraft::UserInteraction::say("Дальше надо будет кликать по углам ячеек. Правильное наведение на угол - это когда ячейка остается 'подсвеченой'. Старайтесь попадать в углы максимально точно. Удобнее будет, если инвертарь будет пуст");
#get_crafttable_cells();
#get_invertory_cells();

train_view_items();

Minecraft::UserInteraction::wait_press_enter("Теперь вам надо найти крестьянина. Станьте возле него. Проверьте, что у него доступно несколько товаров");
get_villager_interface();

$main::config = Minecraft::Settings::save_system_config($main::config);            
Minecraft::UserInteraction::wait_press_enter("Настройка окончена. Обратите внимание на то, что при запуске скриптов раскладка должна быть включена английская.");
#print Dumper($main::config);
