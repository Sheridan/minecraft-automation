#!/usr/bin/perl -w

use strict;
use utf8;
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");
use JSON;
use Time::HiRes qw (sleep);
use File::Path qw(make_path);
use Data::Dumper;
use File::Copy;
use Getopt::Long;
use lib './lib';
use Minecraft::L10n;
use Minecraft::Player;
use Minecraft::Window;
use Minecraft::UserInteraction;
use Minecraft::FileIO;

my $test_mouse_timeout = 0.1;
my $test_turn_timeout = 0.7;
$main::config = Minecraft::FileIO::read_config();
$main::l10n   = Minecraft::L10n->new();
$main::player = Minecraft::Player->new();

my $target = 'all';
GetOptions(
    "target=s" => \$target,
    "help"     => \&help
    ) or die($main::l10n->tr('wrong_commandline'));

sub help
{
  print $main::l10n->tr('setup_help');
  exit(0);
}

# --------------------------------------- служебное -----------------------------------

sub get_cursor_position
{
  my $text = $_[0];
  Minecraft::UserInteraction::say($text);
  my @tmp = split(/ /, `./get-mouse-position`);
  #print Dumper(@tmp);
  return
    {
      'x' => ($tmp[0]+0) > $main::config->{'system'}{'window'}{'geometry'}{'x'} ? ($tmp[0]+0) - $main::config->{'system'}{'window'}{'geometry'}{'x'} : $main::config->{'system'}{'window'}{'geometry'}{'x'} - ($tmp[0]+0),
      'y' => ($tmp[1]+0) > $main::config->{'system'}{'window'}{'geometry'}{'y'} ? ($tmp[1]+0) - $main::config->{'system'}{'window'}{'geometry'}{'y'} : $main::config->{'system'}{'window'}{'geometry'}{'y'} - ($tmp[1]+0)
    };
}

sub calc_cell_center
{
  my $cell = $_[0];
  #print Dumper $cell;
  return
    {
      'x' => int($cell->{'tl'}{'x'} + ($cell->{'br'}{'x'} - $cell->{'tl'}{'x'})/2),
      'y' => int($cell->{'tl'}{'y'} + ($cell->{'br'}{'y'} - $cell->{'tl'}{'y'})/2)
    };
}

sub get_cell_coordinates
{
  my $text = $_[0];
  my $tmp =
  {
    'tl' => get_cursor_position($text.". ".$main::l10n->tr('click_top_left')),
    'br' => get_cursor_position($text.". ".$main::l10n->tr('click_bottom_right'))
  };
  $tmp->{'c'} = calc_cell_center($tmp);
  #print Dumper($tmp);
  return $tmp;
}

sub get_button_coordinates
{
  my $text = $_[0];
  my $tmp = {};
  $tmp->{'c'} = get_cursor_position($text.". ".$main::l10n->tr('press_button'));
  return $tmp;
}

sub get_clean_coordinates
{
  my $text = $_[0];
  my $tmp = {};
  $tmp->{'c'} = get_cursor_position("$text.");
  return $tmp;
}

# --------------------------------------- вопросы -----------------------------------
sub ask_happened
{
  if(!Minecraft::UserInteraction::prompt_yn($main::l10n->tr('everything_went_well')))
  {
    Minecraft::UserInteraction::say($main::l10n->tr('have_to_repeat'));
    return 0;
  }
  $main::config = Minecraft::FileIO::save_system_config($main::config);
  return 1;
}

sub prompt_ask
{
  my ($text, $default) = @_[0..1];
  my $answer = Minecraft::UserInteraction::prompt(sprintf($main::l10n->tr('leave_as_is'), $text, $default));
  if($answer eq '')
  {
    $answer = $default;
  }
  if(!Minecraft::UserInteraction::prompt_yn(sprintf($main::l10n->tr('you_entered'), $answer)))
  {
    return prompt_ask($text, $default);
  }
  return $answer;
}

sub ask_texture_pack
{
  $main::config->{'user'}{'minecraft'}{'texture_pack'} = prompt_ask($main::l10n->tr('setup_resourcepack'), $main::config->{'user'}{'minecraft'}{'texture_pack'});
  $main::config = Minecraft::FileIO::save_user_config($main::config);
  make_path(sprintf("%s/%s/items", $main::config->{'user'}{'paths'}{'screenshosts'}, $main::config->{'user'}{'minecraft'}{'texture_pack'}));
}

sub ask_screenshot_path
{
  $main::config->{'user'}{'paths'}{'screenshosts'} = prompt_ask($main::l10n->tr('enter_screenshot_path'), $main::config->{'user'}{'paths'}{'screenshosts'});
  $main::config = Minecraft::FileIO::save_user_config($main::config);
  make_path($main::config->{'user'}{'paths'}{'screenshosts'});
}

sub ask_mc_title
{
  $main::config->{'user'}{'minecraft'}{'title'} = prompt_ask($main::l10n->tr('enter_minecraft_window_title'), $main::config->{'user'}{'minecraft'}{'title'});
  $main::config = Minecraft::FileIO::save_user_config($main::config);
}

sub prompt_change_existent
{
  my $exists = $_[0];
  return $exists ? Minecraft::UserInteraction::prompt_yn($main::l10n->tr('like_to_reconfigure')) : 1;
}

# ------------------------------------- окна, ячейки.... ----------------------------

sub get_windowsizeposition
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('place_window_comfortable'));
  if(!prompt_change_existent(exists($main::config->{'system'}{'window'}{'geometry'}))) { return; }
  $main::config->{'system'}{'window'}{'geometry'} = Minecraft::Window::get_size_and_position();
  if(!ask_happened()) { get_windowsizeposition(); }
}

sub print_cells_numbers
{
  my ($max_x, $max_y) = @_[0..1];
  Minecraft::UserInteraction::say($main::l10n->tr('cells_numeration'));
  for my $y (0..$max_y)
  {
    for my $x (0..$max_x)
    {
      printf("%d:%d ", $x+1, $y+1);
    }
    print "\n";
  }
}

sub calculate_cell_params
{
  my ($cell_00, $cell_10, $cell_01) = @_[0..2];
  return
  {
    '1st_cell' => $cell_00,
    'width'    => $cell_00->{'br'}{'x'} - $cell_00->{'tl'}{'x'},
    'height'   => $cell_00->{'br'}{'y'} - $cell_00->{'tl'}{'y'},
    'border_width' => $cell_10->{'tl'}{'x'} - $cell_00->{'br'}{'x'},
    'border_height' => $cell_01 ? $cell_01->{'tl'}{'y'} - $cell_00->{'br'}{'y'} : undef
  };
}

sub calculate_cell
{
  my ($params, $x, $y) = @_[0..2];
  #print Dumper($params);
  my $tmp =
    {
    'tl' =>
    {
      'x' => $params->{'1st_cell'}{'tl'}{'x'} + ($params->{'width'}  + $params->{'border_width'})  * $x,
      'y' => $params->{'1st_cell'}{'tl'}{'y'} + ($params->{'border_height'} ? (($params->{'height'} + $params->{'border_height'}) * $y) : 0)
    },
    'br' =>
    {
      'x' => $params->{'1st_cell'}{'br'}{'x'} + ($params->{'width'}  + $params->{'border_width'})  * $x,
      'y' => $params->{'1st_cell'}{'br'}{'y'} + ($params->{'border_height'} ? (($params->{'height'} + $params->{'border_height'}) * $y) : 0)
    }
    };
  $tmp->{'c'} = calc_cell_center($tmp);
  return $tmp;
}

sub get_no_interface_point
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('open_big-chest'));
  $main::config->{'system'}{'no-interface'} = get_clean_coordinates($main::l10n->tr('click_outside'));
  if(!ask_happened()) { get_no_interface_point(); }
}

sub get_crafttable_cells
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('open_crafttable'));
  print_cells_numbers(2,2);
  if(prompt_change_existent(exists($main::config->{'system'}{'crafttable'})))
  {
    my $params = calculate_cell_params( get_cell_coordinates(sprintf($main::l10n->tr('crafttable_cell_xy'), 1, 1)),
                                        get_cell_coordinates(sprintf($main::l10n->tr('crafttable_cell_xy'), 2, 1)),
                                        get_cell_coordinates(sprintf($main::l10n->tr('crafttable_cell_xy'), 1, 2)));
    for my $y (0..2)
    {
      for my $x (0..2)
      {
        $main::config->{'system'}{'crafttable'}{'cells'}{$x}{$y} = calculate_cell($params, $x, $y);
      }
    }
    $main::config->{'system'}{'crafttable'}{'result'}  = get_cell_coordinates($main::l10n->tr('crafttable_result_cell'));
    $main::config->{'system'}{'crafttable'}{'clean'}   = get_cell_coordinates($main::l10n->tr('crafttable_clean_place_cell'));
    $main::config->{'system'}{'crafttable'}{'is_open'} = get_cell_coordinates($main::l10n->tr('crafttable_interface_caption'));
  }
  else
  {
    Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('open_crafttable')." ".$main::l10n->tr('need_to_make_screenshots'));
  }
  get_crafttable_screenshots();
  if(!ask_happened() || !test_crafttable()) { get_crafttable_cells(); }
  get_self_invertory_cells('crafttable');
}

sub get_crafttable_screenshots
{
  $main::player->head()->take_screenshot("dont-delete-crafttable-clean"       , $main::config->{'system'}{'crafttable'}{'clean'});
  $main::player->head()->take_screenshot("dont-delete-crafttable-result-empty", $main::config->{'system'}{'crafttable'}{'result'});
  $main::player->head()->take_screenshot("dont-delete-crafttable-is-open"     , $main::config->{'system'}{'crafttable'}{'is_open'});
}

sub get_self_invertory_cells
{
  my $interface = $_[0];
  if($interface =~ m/villager/)
  {
    $main::config->{'system'}{$interface}{'self-invertory'} = $main::config->{'system'}{'crafttable'}{'self-invertory'};
    return;
  }
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('train_self_invertory'), $main::l10n->tr(sprintf('open_%s', $interface)));
  print_cells_numbers(8,3);
  if(prompt_change_existent(exists($main::config->{'system'}{$interface}{'self-invertory'})))
  {
     Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('main_self_invertory'));
     my $params = calculate_cell_params( get_cell_coordinates(sprintf($main::l10n->tr('invertory_cell_xy'), 1, 1)),
                                         get_cell_coordinates(sprintf($main::l10n->tr('invertory_cell_xy'), 2, 1)),
                                         get_cell_coordinates(sprintf($main::l10n->tr('invertory_cell_xy'), 1, 2)));
     for my $y (0..2)
     {
       for my $x (0..8)
       {
         $main::config->{'system'}{$interface}{'self-invertory'}{$x}{$y} = calculate_cell($params, $x, $y);
       }
    }
    Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('hand_self_invertory'));
    $params = calculate_cell_params( get_cell_coordinates(sprintf($main::l10n->tr('invertory_cell_xy'), 1, 4)),
                                     get_cell_coordinates(sprintf($main::l10n->tr('invertory_cell_xy'), 2, 4)),
                                     undef);
    for my $x (0..8)
    {
      $main::config->{'system'}{$interface}{'self-invertory'}{$x}{3} = calculate_cell($params, $x, 0);
    }
    if(!ask_happened() || !test_invertory($interface)) { get_self_invertory_cells($interface); }
  }
}

sub get_big_chest_cells
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('open_empty_big_chest'));
  print_cells_numbers(8,5);
  if(prompt_change_existent(exists($main::config->{'system'}{'big-chest'}{'cells'})))
  {
    my $params = calculate_cell_params( get_cell_coordinates(sprintf($main::l10n->tr('big_chest_cell_xy'), 1, 1)),
                                        get_cell_coordinates(sprintf($main::l10n->tr('big_chest_cell_xy'), 2, 1)),
                                        get_cell_coordinates(sprintf($main::l10n->tr('big_chest_cell_xy'), 1, 2)));
    for my $y (0..5)
    {
      for my $x (0..8)
      {
        $main::config->{'system'}{'big-chest'}{'cells'}{$x}{$y} = calculate_cell($params, $x, $y);
      }
    }
  }
  $main::config->{'system'}{'big-chest'}{'is_open'} = get_cell_coordinates($main::l10n->tr('big_chest_interface_caption'));
  get_big_chest_screenshots();
  if(!ask_happened() || !test_big_chest()) { get_big_chest_cells(); }
  get_self_invertory_cells('big-chest');
}

sub get_big_chest_screenshots
{
  $main::player->head()->take_screenshot("dont-delete-big-chest-is-open", $main::config->{'system'}{'big-chest'}{'is_open'});
}

sub get_villager_interface
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('find_villager'));
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('open_villager'));
  if(prompt_change_existent(exists($main::config->{'system'}{'villager'})))
  {
    $main::config->{'system'}{'villager'}{'invertory'}{0} = get_cell_coordinates($main::l10n->tr('left_villager_invertory_cell'));
    $main::config->{'system'}{'villager'}{'invertory'}{1} = get_cell_coordinates($main::l10n->tr('right_villager_invertory_cell'));
    $main::config->{'system'}{'villager'}{'result'}       = get_cell_coordinates($main::l10n->tr('result_villager_cell'));
    $main::config->{'system'}{'villager'}{'clean'}        = get_cell_coordinates($main::l10n->tr('villager_clean_place_cell'));
    $main::config->{'system'}{'villager'}{'is_open'}      = get_cell_coordinates($main::l10n->tr('villager_interface_caption'));
    Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('switch_to_avialable_trade'));
    $main::config->{'system'}{'villager'}{'trade-avialable'} = get_cell_coordinates($main::l10n->tr('upper_trade_result_arrow'));
    Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('find_upgraded_villager'));
    $main::config->{'system'}{'villager'}{'next_page'} = get_cell_coordinates($main::l10n->tr('button_next_page'));
    $main::config->{'system'}{'villager'}{'prev_page'} = get_cell_coordinates($main::l10n->tr('button_prev_page'));
  }
  else
  {
    Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('find_upgraded_villager')." ".$main::l10n->tr('need_to_make_screenshots'));
  }
  get_villager_screenshots();
  if(!ask_happened() || !test_villager_interface()) { get_villager_interface(); }
  get_self_invertory_cells('villager');
}

sub get_villager_screenshots
{
  for my $button_name ('next_page', 'prev_page')
  {
    $main::player->hand()->mouse_move_to_button($main::config->{'system'}{'villager'}{$button_name});
    for (0..20)
    {
      $main::player->hand()->mouse_left_click();
    }
    $main::player->head()->take_screenshot(sprintf("dont-delete-villager-%s-not-avialable", $button_name), $main::config->{'system'}{'villager'}{$button_name});
  }
  $main::player->head()->take_screenshot("dont-delete-villager-is-open"        , $main::config->{'system'}{'villager'}{'is_open'});
  $main::player->head()->take_screenshot("dont-delete-villager-trade-avialable", $main::config->{'system'}{'villager'}{'trade-avialable'});
  $main::player->head()->take_screenshot("dont-delete-villager-invertory-0"    , $main::config->{'system'}{'villager'}{'invertory'}{0});
  $main::player->head()->take_screenshot("dont-delete-villager-invertory-1"    , $main::config->{'system'}{'villager'}{'invertory'}{1});
  $main::player->head()->take_screenshot("dont-delete-villager-result-empty"   , $main::config->{'system'}{'villager'}{'result'});
  $main::player->head()->take_screenshot("dont-delete-villager-clean"          , $main::config->{'system'}{'villager'}{'clean'});
}

# ------------------------------------- Обучение шмоту ----------------------------
sub item_is_known_for
{
  my ($item, $interface, $cells, $max_x, $max_y) = @_[0..4];
  my $path = sprintf("%s/%s", $main::player->head()->screenshots_path(), $main::player->head()->screenshot_item_path($item, $interface, $cells));
  if (! -d $path )
  {
    make_path($path);
    return 0;
  }
  for my $y (reverse 0..$max_y)
  {
    for my $x (reverse 0..$max_x)
    {
      if(! -e  $main::player->head()->screenshot_full_filename($main::player->head()->screenshot_item_name($item, $interface, $cells, $x, $y)))
      {
        return 0;
      }
    }
  }
  return 1;
}

sub train_view_item_xy
{
  my ($item, $interface, $cells, $max_x, $max_y) = @_[0..4];
  my $last_cell = $main::config->{'system'}{$interface}{$cells}{$max_x}{$max_y};
  for my $y (reverse 0..$max_y)
  {
    for my $x (reverse 0..$max_x)
    {
      my $attempts = 10;
      if(! -e  $main::player->head()->screenshot_full_filename($main::player->head()->screenshot_item_name($item, $interface, $cells, $x, $y)))
      {
        if(!($x == $max_x && $y == $max_y) && $item ne 'empty')
        {
          $main::player->hand()->move_stack_between_cells($last_cell, $main::config->{'system'}{$interface}{$cells}{$x}{$y});
          $last_cell = $main::config->{'system'}{$interface}{$cells}{$x}{$y};
        }
        do
        {
          $main::player->head()->take_item_screenshot($item, $interface, $cells, $x, $y);
          $attempts--;
          if(!$attempts)
          {
            Minecraft::UserInteraction::say($main::l10n->tr('cannot_take_csreenshots'), $main::l10n->tr($item));
            exit(0);
          }
        }
        while (!$main::player->head()->compare_screenshots_no_cache
                    (
                        $main::player->head()->screenshot_full_filename($main::player->head()->screenshot_item_name($item, $interface, $cells, $x, $y)),
                        $main::player->head()->take_temp_item_screenshot($main::config->{'system'}{$interface}{$cells}{$x}{$y}))
                    );
      }
    }
  }
  $main::player->hand()->take_stack_from_cell($last_cell);
}

sub train_view_item_crafttable
{
  my ($item, $chest_cell) = @_[0..1];
  my $deg = 20;
  if(!item_is_known_for($item, 'crafttable', 'self-invertory', 8, 3) + !item_is_known_for($item, 'crafttable', 'cells', 2, 2) > 0)
  {
    Minecraft::UserInteraction::say($main::l10n->tr('training_item'), $main::l10n->tr($item));
    $main::player->hand()->move_stack_between_cells($chest_cell, $main::config->{'system'}{'big-chest'}{'self-invertory'}{8}{3});
    $main::player->hand()->close_interface('big-chest');
    $main::player->body()->turn_down_deg($deg);
    $main::player->hand()->open_interface('crafttable');
    train_view_item_xy($item, 'crafttable', 'self-invertory', 8, 3);
    $main::player->hand()->put_stack_to_cell($main::config->{'system'}{'crafttable'}{'cells'}{2}{2});
    train_view_item_xy($item, 'crafttable', 'cells', 2, 2);
    $main::player->hand()->put_stack_to_cell($main::config->{'system'}{'crafttable'}{'self-invertory'}{8}{3});
    $main::player->hand()->close_interface('crafttable');
    $main::player->body()->turn_up_deg($deg);
    $main::player->hand()->open_interface('big-chest');
    $main::player->hand()->move_stack_between_cells($main::config->{'system'}{'big-chest'}{'self-invertory'}{8}{3}, $chest_cell);
  }
}

sub train_view_items_chest
{
  my $items = $_[0];
  Minecraft::UserInteraction::say($main::l10n->tr('chest_must_contain'));
  for my $y (0..5)
  {
    for my $x (0..8)
    {
      if(exists($items->{$x}{$y}))
      {
        printf("[%d:%d:%s]", $x, $y, $main::l10n->tr($items->{$x}{$y}));
      }
      else
      {
        printf("[%d:%d:%s]", $x, $y, $main::l10n->tr('empty'));
      }
    }
    print "\n";
  }
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('become_near_trunk'));
  for my $y (0..5)
  {
    for my $x (0..8)
    {
      if(exists($items->{$x}{$y}))
      {
        train_view_item_crafttable($items->{$x}{$y}, $main::config->{'system'}{'big-chest'}{'cells'}{$x}{$y});
      }
    }
  }
}

sub train_view_items
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('train_items'));
  for my $chest_file (Minecraft::FileIO::get_train_chests())
  {
      Minecraft::UserInteraction::say($main::l10n->tr('chest_file'), $chest_file);
      train_view_items_chest(Minecraft::FileIO::read_csv_file($chest_file));
  }
  $main::config = Minecraft::FileIO::save_system_config($main::config);
  copy_items_images();
}

sub copy_items_images
{

  my $items_dir = sprintf("%s/%s/items/", $main::config->{'user'}{'paths'}{'screenshosts'}, $main::config->{'user'}{'minecraft'}{'texture_pack'});
  opendir(my $dir_h, $items_dir) or die $!;
  while (my $item = readdir($dir_h))
  {
    next if ($item =~ m/^\./);
    if(-d $items_dir.$item)
    {
      make_path($items_dir.$item."/villager/self-invertory");
      Minecraft::UserInteraction::say($main::l10n->tr('copy_item_images'), $main::l10n->tr($item));
      for my $y (0..3)
      {
        for my $x (0..8)
        {
          copy
            (
              $main::player->head()->screenshot_full_filename($main::player->head()->screenshot_item_name($item, 'crafttable', 'self-invertory', $x, $y)),
              $main::player->head()->screenshot_full_filename($main::player->head()->screenshot_item_name($item, 'villager', 'self-invertory', $x, $y))
            );
        }
      }
    }
  }
  closedir($dir_h);
}

# -------------------------------------------------- тесты --------------------------------------------
sub test_crafttable
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('test_crafttable_cells'));
  for my $y (0..2)
  {
    for my $x (0..2)
    {
      $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'crafttable'}{'cells'}{$x}{$y});
      sleep($test_mouse_timeout);
    }
  }
  $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'crafttable'}{'result'});
  sleep($test_mouse_timeout);
  return ask_happened();
}

sub test_invertory
{
  my $interface = $_[0];
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('test_self_inventory_cells'));
  for my $y (0..3)
  {
    for my $x (0..8)
    {
      $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{$interface}{'self-invertory'}{$x}{$y});
      sleep($test_mouse_timeout);
    }
  }
  return ask_happened();
}

sub test_big_chest
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('test_large_chest_cells'));
  for my $y (0..5)
  {
    for my $x (0..8)
    {
      $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'big-chest'}{'cells'}{$x}{$y});
      sleep($test_mouse_timeout);
    }
  }
  return ask_happened();
}

sub test_villager_interface
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('test_trade_interface'));
  $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'villager'}{'next_page'});       sleep($test_mouse_timeout);
  $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'villager'}{'prev_page'});       sleep($test_mouse_timeout);
  $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'villager'}{'invertory'}{0});    sleep($test_mouse_timeout);
  $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'villager'}{'invertory'}{1});    sleep($test_mouse_timeout);
  $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'villager'}{'result'});          sleep($test_mouse_timeout);
  $main::player->hand()->mouse_move_to_cell($main::config->{'system'}{'villager'}{'trade-avialable'}); sleep($test_mouse_timeout);
  return ask_happened();
}

sub test_turn
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('test_turn'));
  $main::player->hand()->use();              sleep($test_turn_timeout);
  $main::player->body()->turn_down_deg(180); sleep($test_turn_timeout);
  $main::player->body()->turn_up_deg(90);    sleep($test_turn_timeout);
  $main::player->body()->turn_up_deg(90);    sleep($test_turn_timeout);
  $main::player->body()->turn_down_deg(135); sleep($test_turn_timeout);
  for (0..11)
  {
    $main::player->body()->turn_left_deg(30);sleep($test_turn_timeout);
  }
  return ask_happened();
}

# ------------------------------------------------------------ Повороты -----------------------------------------------------

sub interface_is_open
{
  my $place_cell = $_[0];
  return $main::player->head()->compare_screenshots($main::player->head()->screenshot_full_filename('setup-turn'),
         $main::player->head()->take_temp_screenshot($place_cell, 0));
}

sub setup_turn
{
  Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('setup_turn'));
  my $interface_cell = get_cell_coordinates($main::l10n->tr('self_interface_clean_place_cell'));
  $main::player->head()->take_screenshot("setup-turn", $interface_cell);

  my $turn = 0;
  get_cursor_position($main::l10n->tr('set_turn_horizont'));
  do
  {
    $turn+=2;
    $main::player->body()->turn_horizontal_points(2);
    #sleep(0.03);
  }
  while(!interface_is_open($interface_cell));
  $main::config->{'system'}{'turn'}{'horizontal'} = $turn/10;
  $turn = 0;
  get_cursor_position($main::l10n->tr('set_turn_vertical'));
  do
  {
    $turn+=2;
    $main::player->body()->turn_vertical_points(-2);
    #sleep(0.03);
  }
  while(!interface_is_open($interface_cell));
  $main::config->{'system'}{'turn'}{'vertical'} = $turn/10;

  if(!ask_happened() || !test_turn()) { setup_turn(); }
}

# ------------------------------------------------------------ main -----------------------------------------------------

sub run_setup
{
  my $real_target = $_[0];
  if(exists($main::config->{'system'}{'window'}{'geometry'}))
  {
    Minecraft::Window::restore_size_and_position();
  }
  for ($real_target)
  {
    if     (/default-uc/)   { last; }
    elsif  (/invertory/)    { get_self_invertory_cells('crafttable');    }
    elsif  (/crafttable/)   { get_crafttable_cells();                                   }
    elsif  (/villager/)     { get_villager_interface();                                 }
    elsif  (/items/)        { train_view_items();                                       }
    elsif  (/turn/)         { setup_turn();                                             }
    elsif  (/options/)
    {
      ask_screenshot_path();
      ask_texture_pack();
      ask_mc_title();
    }
    elsif  (/window/)       { get_windowsizeposition();                                 }
    elsif  (/big-chest/)
    {
      get_big_chest_cells();
      get_no_interface_point();
    }
    elsif  (/all/)
    {
      run_setup('window');
      run_setup('options');
      run_setup('crafttable');
      run_setup('big-chest');
      run_setup('turn');
      run_setup('items');
      run_setup('villager');
    }
    elsif  (/chrespack/)
    {
      ask_texture_pack();
      Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('open_crafttable'));
      get_crafttable_screenshots();
      Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('open_big-chest'));
      get_big_chest_screenshots();
      Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('find_upgraded_villager')." "
                                                  .$main::l10n->tr('need_to_make_screenshots')." "
                                                  .$main::l10n->tr('open_villager'));
      get_villager_screenshots();
      run_setup('items');
    }
    else { help(); }
  }

}

Minecraft::UserInteraction::say($main::l10n->tr('setup_begin'));
run_setup($target);
Minecraft::FileIO::save_system_config($main::config);
Minecraft::FileIO::save_user_config($main::config);
Minecraft::UserInteraction::wait_press_enter($main::l10n->tr('setup_end'));

#print Dumper($main::config);
