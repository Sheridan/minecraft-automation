#!/usr/bin/perl -w

use strict;
use JSON;
use Time::HiRes qw (sleep);
use Data::Dumper;
use Getopt::Long;
use lib './lib';
use Minecraft::Automation;
use Minecraft::Screenshoter;
my $config = Minecraft::Automation::read_config();
my $seller = '';
GetOptions(
		"seller=s" => \$seller,
		"help"     => \&help
	  ) or die("Что то не так с опциями командной строки\n");

sub help
{
	print <<_HELP_;
Использование: trade <options>
Опции:
		--seller=строка  С кем надо торговать
			Доступно: 
			farmer - Фермер
				В инвертаре выложить ряды, снизу вверх: арбузы, тыквы, картошка, морковь
			libraryan - Библиотекарь
				Инвертарь надо забить бумагой
			meater - Мясник
				Инвертарь надо забить сырой курицей
			priest - Священник
				Инвертарь надо забить гнилой плотью
_HELP_
	exit(0);
}

sub move_stack_from_trade_result
{
    take_stack_to_invertory($config->{'system'}{'villager'}{'result'});
}

# ---------------------------------------------  навигация по страницам крестьянина ----------------------------------
sub switch_to_trader_page
{
    my $page = $_[0];
	switch_to_first_trader_page();
	if($page > 1)
	{
		Minecraft::Automation::mouse_move_to_button($config->{'system'}{'villager'}{'next_page'}); 
		for(my $i = 1; $i < $page; $i++)
		{
			Minecraft::Automation::mouse_left_click();
		}
	}
}

sub switch_to_first_trader_page
{
    Minecraft::Automation::mouse_move_to_button($config->{'system'}{'villager'}{'prev_page'}); 
    for (0..15)
    {
		Minecraft::Automation::mouse_left_click();
    }
}
# ---------------------------------------------  обратная связь, скриншоты ----------------------------------
sub trader_can_sell
{
    return Minecraft::Screenshoter::compare_screenshots('dont-delete-villager-trade-avialable', 
														Minecraft::Screenshoter::take_temp_screenshot($config->{'system'}{'villager'}{'trade-avialable'}));
}

sub trader_can_sell_on_page
{
    my $page = $_[0];
    switch_to_trader_page($page);
    return trader_can_sell();
}

sub trader_result_is_empty
{
	return Minecraft::Screenshoter::compare_screenshots('dont-delete-villager-result-empty', 
														Minecraft::Screenshoter::take_temp_screenshot($config->{'system'}{'villager'}{'result'}));
}
# ---------------------------------------------  элементы торговли ----------------------------------
sub sell_stack
{
    my ($ix, $iy, $ti) = @_[0..2];
	Minecraft::Automation::move_stack_between_cells($config->{'system'}{'invertory'}{$ix}{$iy}, $config->{'system'}{'villager'}{'invertory'}{$ti});
    move_stack_from_trade_result();
    while(!trader_result_is_empty() && trader_can_sell())
    {
		Minecraft::Automation::put_stack_to_cell($config->{'system'}{'villager'}{'invertory'}{$ti});
        move_stack_from_trade_result();
    }
}

sub sell_invertory_row
{
    my ($x, $y, $page) = @_[0..2];
	my $trader_invertory = 0;
    switch_to_trader_page($page);
    for (; $x <= 8; $x++)
    {
        sell_stack($x, $y, $trader_invertory);
        if(!trader_can_sell())
        {
			if(!trader_result_is_empty())
			{
				Minecraft::Automation::put_stack_to_cell($config->{'system'}{'villager'}{'invertory'}{$trader_invertory});
			}
			Minecraft::Automation::move_stack_between_cells($config->{'system'}{'villager'}{'invertory'}{$trader_invertory}, $config->{'system'}{'invertory'}{$x}{$y});
			return $x;
		}
    }
    return -1;
}

sub wait_for_trader_upgrade
{
    my @pages_to_check = @_;
    Minecraft::Automation::say("Отдыхаем, пока торговец апгредится...");
    system('xdotool key e sleep 3 click --delay 100 3 sleep 2');
    if(scalar(@pages_to_check) > 0)
    {
		my $flag = 0;
		Minecraft::Automation::say("Проверяем, проапгредился ли торговец...");
		for my $page (@pages_to_check)
		{
				$flag += trader_can_sell_on_page($page) ? 1 : 0;
		}
		if($flag < scalar(@pages_to_check))
		{
				Minecraft::Automation::say("Торговец устал, уходим.");
				exit(0);
		}
    }
    return 1;
}

sub sell_all_invertory
{
    my ($xpos, $ypos, $page) = @_[0..2];
    my $trader_invertory = 0;
    Minecraft::Automation::say("Торгуем весь инвертарь.");
    switch_to_trader_page($page);
    if(!trader_can_sell())
    {
		return { 'x' => $xpos, 'y' => $ypos, 'done' => 0 };
    }
    for (my $y=$ypos; $y<=3; $y++)
    {
		for (my $x=$xpos; $x<=8; $x++)
		{
			sell_stack($x, $y, $trader_invertory);
			if(!trader_can_sell())
			{
				if(!trader_result_is_empty())
				{
					Minecraft::Automation::put_stack_to_cell($config->{'system'}{'villager'}{'invertory'}{$trader_invertory});
				}
				Minecraft::Automation::move_stack_between_cells($config->{'system'}{'villager'}{'invertory'}{$trader_invertory}, $config->{'system'}{'invertory'}{$x}{$y});
				return { 'x' => $x, 'y' => $y, 'done' => 1 };
			}
			if($xpos > 0) { $xpos = 0; } 
		}
		if($ypos > 0) { $ypos = 0; } 
    }
    return { 'done' => -1 };
}

sub buy_items_on_page
{
    my $page = $_[0];
    switch_to_trader_page($page);
	Minecraft::Automation::say("Покупаем шмот.");
	my $trader_invertory = 0;
	Minecraft::Automation::move_stack_between_cells($config->{'system'}{'invertory'}{0}{0}, $config->{'system'}{'villager'}{'invertory'}{$trader_invertory});
    do
    {
		Minecraft::Automation::drop_item_from_cell($config->{'system'}{'villager'}{'result'});
		Minecraft::Automation::mouse_move_to_cell($config->{'system'}{'villager'}{'result'});
    }
    while(trader_can_sell() && !trader_result_is_empty());
	Minecraft::Automation::move_stack_between_cells($config->{'system'}{'villager'}{'invertory'}{$trader_invertory}, $config->{'system'}{'invertory'}{0}{0});
}

sub trade_simple
{
    my ($xpos, $ypos, $item_page, $buy_pages) = @_[0..3];
    my $trade_stat = sell_all_invertory($xpos, $ypos, $item_page);
    if($trade_stat->{'done'} < 0)
    {
		Minecraft::Automation::say("Торговать больше нечем, уходим.");
		exit (0); 
    }
    wait_for_trader_upgrade();
    if(trader_can_sell_on_page($item_page))
    {
		trade_simple($trade_stat->{'x'}, $trade_stat->{'y'}, $item_page, $buy_pages);
    }
    for my $bpage (@{$buy_pages})
    {
		if(trader_can_sell_on_page($bpage))
		{
			buy_items_on_page($bpage);
			wait_for_trader_upgrade();
			if(trader_can_sell_on_page($item_page))
			{
				trade_simple($trade_stat->{'x'}, $trade_stat->{'y'}, $item_page, $buy_pages);
			}
		}
    }
}

# --------------------------------------------- торговля с деревенскими ----------------------------------
sub trade_farmer
{
	my ($xpos_0, $xpos_1, $xpos_2, $xpos_3) = @_[0..3];
	# снизу-вверх ряды арбуз(7), тыква(5), картошка (2), морковка (3)
	if($xpos_0 >= 0) { Minecraft::Automation::say("Торгуем морковь");  $xpos_0 = sell_invertory_row($xpos_0, 0, 3); } 
	if($xpos_1 >= 0) { Minecraft::Automation::say("Торгуем картошку"); $xpos_1 = sell_invertory_row($xpos_1, 1, 2); } 
	if($xpos_2 >= 0) { Minecraft::Automation::say("Торгуем тыкву");    $xpos_2 = sell_invertory_row($xpos_2, 2, 5); } 
	if($xpos_3 >= 0) { Minecraft::Automation::say("Торгуем арбуз");    $xpos_3 = sell_invertory_row($xpos_3, 3, 7); } 
	if($xpos_0 < 0 && $xpos_1 < 0 && $xpos_2 < 0 && $xpos_3 < 0) 
	{
		Minecraft::Automation::say("Торговать больше нечем, уходим.");
		exit (0); 
	}
	if(wait_for_trader_upgrade(2,3,5,7))
	{
		trade_farmer($xpos_0, $xpos_1, $xpos_2, $xpos_3);
	}
}

sub trade_libraryan
{
    trade_simple(0, 0, 1, [5, 7, 8]);
}

sub trade_meater
{
    trade_simple(0, 0, 2, [4, 5]);
}

sub trade_priest
{
    trade_simple(0, 0, 1, [3, 4, 5, 6]);
}

for ($seller)
{
	if		(/farmer/)     { trade_farmer(0, 0, 0 ,0); }
	elsif	(/libraryan/)  { trade_libraryan();        }
	elsif	(/meater/)     { trade_meater();           }
	elsif	(/priest/)     { trade_priest();           }
	else			 	   { help();                   }
	
}